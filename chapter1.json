{
    "1": {
        "title": "ตัวแปร [ variables ] และชนิดข้อมูล [ boolean, string, number ]",
        "description": "boolean จะเป็นค่าจริงหรือเท็จ [ true / false ]\nstring จะเป็นข้อความ [ \"string\" ]\nnumber จะเป็นตัวเลข [ 1, 2, 3 ]",
        "code": [
            "local variables_name = true -- การกำหนดตัวแปร ข้างหลังเท่ากับจะเป็นการกำหนดค่าให้กับตัวแปร",
            "print(variables_name)"
        ],
        "canRun": true
    },
    "2": {
        "title": "คำสั่งเงื่อนไข if, then, else",
        "description": "ใช้สำหรับแบ่งการทำงานตามเงื่อนไข เมื่อเงื่อนไขเป็นจริงจะรันโค้ดส่วน then หากไม่เป็นจริงจะไปส่วน else และสามารถใช้ elseif เพิ่มเงื่อนไขรองได้",
        "code": [
            "-- ตัวอย่าง 1 : ตรวจสอบอายุ",
            "local age = 18",
            "if age >= 18 then",
            "    print(\"Adult\")",
            "else",
            "    print(\"Minor\")",
            "end",
            "",
            "-- ตัวอย่าง 2 : ใช้ elseif ตรวจสอบเกรด",
            "local score = 75",
            "if score >= 90 then",
            "    print(\"Grade A\")",
            "elseif score >= 80 then",
            "    print(\"Grade B\")",
            "elseif score >= 70 then",
            "    print(\"Grade C\")",
            "else",
            "    print(\"Grade D or F\")",
            "end"
        ],
        "canRun": true
    },
    "3": {
        "title": "โครงสร้างลูป [ loops ]",
        "description": "ตัวอย่างการใช้ลูป while และ for แบบง่าย ๆ พร้อมวิธีใช้ break และ return ภายในฟังก์ชัน",
        "code": [
            "-- ตัวอย่างที่ 1: ลูป while นับจาก 1 ถึง 3",
            "local count = 1                   -- เริ่มต้นตัวแปรนับ",
            "while count <= 3 do               -- วนซ้ำตราบใดที่ count <= 3",
            "    print(\"while count =\", count)  -- แสดงค่าปัจจุบันของ count",
            "    count = count + 1             -- เพิ่มค่า count ทีละ 1",
            "end",
            "",
            "-- ตัวอย่างที่ 2: ลูป for นับจาก 1 ถึง 3",
            "for i = 1, 3 do                   -- เริ่มจาก i=1 จนถึง i=3",
            "    print(\"for i =\", i)           -- แสดงค่าปัจจุบันของ i",
            "end",
            "",
            "-- ตัวอย่างที่ 3: ใช้ break หยุดลูปก่อนครบ",
            "for i = 1, 5 do",
            "    if i == 2 then                -- ถ้า i เท่ากับ 2",
            "        print(\"หยุดที่ i =\", i)    -- แสดงข้อความแล้วหยุดลูป",
            "        break",
            "    end",
            "    print(\"วนต่อที่ i =\", i)",
            "end",
            "",
            "-- ตัวอย่างที่ 4: return ในฟังก์ชันง่าย ๆ",
            "local function sayHello(name)",
            "    if name == \"\" then          -- ถ้าไม่มีชื่อ",
            "        return                    -- ออกจากฟังก์ชันโดยไม่ส่งค่า",
            "    end",
            "    return \"สวัสดี, \" .. name    -- ส่งข้อความทักทายกลับไป",
            "end",
            "",
            "local greeting = sayHello(\"วันจันทร์\")   -- เรียกใช้ฟังก์ชันทักทาย",
            "print(greeting)                      -- แสดงผลลัพธ์"
        ],
        "canRun": true
    },
    "4": {
        "title": "ฟังก์ชัน [ Functions ] และ Scope",
        "description": "ฟังก์ชันคือชุดคำสั่งที่ประกอบด้วยชื่อและบล็อกของโค้ดที่ใช้ทำงานเฉพาะอย่าง สามารถเรียกใช้ซ้ำได้หลายครั้ง\nการประกาศและเรียกใช้ฟังก์ชัน: ใช้คำว่า function ชื่อฟังก์ชัน() ... end แล้วเรียกใช้ด้วยชื่อฟังก์ชัน()\nพารามิเตอร์และการคืนค่า: ฟังก์ชันสามารถรับค่าจากภายนอกผ่านพารามิเตอร์ และส่งค่ากลับด้วยคำสั่ง return\nScope [ ขอบเขตตัวแปร ]: ตัวแปร local จะมีขอบเขตภายในฟังก์ชัน ส่วนตัวแปร global ประกาศนอกฟังก์ชันจะเข้าถึงได้ทั่วโปรแกรม",
        "code": [
            "-- ตัวอย่างที่ 1: ประกาศและเรียกใช้ฟังก์ชันง่ายๆ",
            "function sayHello()",
            "    print(\"Hello, world!\")",
            "end",
            "sayHello()",
            "",
            "-- ตัวอย่างที่ 2: ฟังก์ชันที่มีพารามิเตอร์และคืนค่า",
            "function add(a, b)",
            "    return a + b",
            "end",
            "local sum = add(5, 3)",
            "print(\"ผลบวก =\", sum)",
            "",
            "-- ตัวอย่างที่ 3: การใช้ Local vs Global",
            "local x = 10  -- ตัวแปร local",
            "y = 20        -- ตัวแปร global",
            "",
            "function testScope()",
            "    local x = 1",
            "    y = 2",
            "    print(\"ภายในฟังก์ชัน: x =\", x, \"y =\", y)",
            "end",
            "",
            "testScope()",
            "print(\"ภายนอกฟังก์ชัน: x =\", x, \"y =\", y)"
        ],
        "canRun": true
    },
    "5": {
        "title": "ตาราง [ Tables ] และ Metatables",
        "description": "ตารางคือโครงสร้างข้อมูลแบบคีย์-ค่า สามารถเก็บค่าหลายๆ ค่าได้ในตัวแปรเดียว\n\nสร้าง ติดตั้งค่า อ่าน-เขียน: ใช้ {} เพื่อสร้าง, t.key = value หรือ t[1] = value เพื่อเขียน และอ่านด้วย t.key หรือ t[1]\n\nวิธีใช้เป็นอาเรย์: เก็บค่าตามลำดับ index เริ่มที่ 1, ใช้ #t เพื่อหาความยาว\n\nวิธีใช้เป็นดิกชันนารี: กำหนดคีย์เป็น string หรือค่าประเภทอื่นๆ เช่น t[\"key\"] = value\n\nพื้นฐาน Metatable: ใช้ setmetatable เพื่อกำหนด metatable ให้ตาราง, __index ใช้สำหรับ fallback เมื่อค่าไม่พบในตารางหลัก",
        "code": [
            "-- ตัวอย่างที่ 1: ตารางเป็นอาเรย์",
            "local fruits = {\"apple\", \"banana\", \"cherry\"}",
            "for i = 1, #fruits do",
            "    print(i, fruits[i])",
            "end",
            "",
            "-- ตัวอย่างที่ 2: ตารางเป็นดิกชันนารี",
            "local person = { name = \"Alice\", age = 30 }",
            "print(person.name, person[\"age\"])",
            "",
            "-- ตัวอย่างที่ 3: ใช้ Metatable และ __index",
            "local default = { score = 0 }",
            "local player = setmetatable({ name = \"Bob\" }, { __index = default })",
            "print(player.name, player.score)  -- Bob, 0"
        ],
        "canRun": true
    },
    "6": {
        "title": "โมดูล [ Modules ] และ require",
        "description": "โมดูลคือไฟล์แยกที่เก็บโค้ดซ้ำได้ ใช้ ModuleScript ใน Roblox\nการใช้ require: เรียกโมดูลเข้ามาใช้งานด้วย require(path)\nการคืนค่าด้วย return: ใน ModuleScript ให้ return ตารางหรือฟังก์ชัน เมื่อ require จะได้ค่าที่ return\nจัดการ Dependency: โมดูลหนึ่งสามารถ require โมดูลอื่นได้ สร้างความเป็นระเบียบและแยกความรับผิดชอบ",
        "code": [
            "-- ModuleScript: MathUtils (เก็บไว้ใน ReplicatedStorage.Modules.MathUtils)",
            "local MathUtils = {}",
            "function MathUtils.add(a, b)",
            "    return a + b",
            "end",
            "function MathUtils.mul(a, b)",
            "    return a * b",
            "end",
            "return MathUtils",
            "",
            "-- ModuleScript: StringUtils (เก็บไว้ใน ReplicatedStorage.Modules.StringUtils)",
            "local StringUtils = {}",
            "function StringUtils.upper(str)",
            "    return string.upper(str)",
            "end",
            "return StringUtils",
            "",
            "-- ใช้งานใน Script ปกติ",
            "local Modules = game:GetService(\"ReplicatedStorage\").Modules",
            "local MathUtils = require(Modules.MathUtils)",
            "local StringUtils = require(Modules.StringUtils)",
            "",
            "local sum = MathUtils.add(2, 3)",
            "print(\"2 + 3 =\", sum)             -- 2 + 3 = 5",
            "print(StringUtils.upper(\"hello\")) -- HELLO"
        ],
        "canRun": false
    },
    "7": {
        "title": "การจัดการข้อผิดพลาด [ Error Handling ]",
        "description": "การใช้ pcall และ xpcall เพื่อจับข้อผิดพลาดโดยไม่ให้โปรแกรมหยุดทำงาน\nและการโยนข้อผิดพลาดด้วยฟังก์ชัน error() เพื่อแจ้งปัญหาเมื่อเงื่อนไขไม่ถูกต้อง",
        "code": [
            "-- ตัวอย่างที่ 1: จับข้อผิดพลาดด้วย pcall",
            "local success, result = pcall(function()",
            "    return 10 / 0",
            "end)",
            "if success then",
            "    print(\"Result:\", result)",
            "else",
            "    print(\"Error caught:\", result)",
            "end",
            "",
            "-- ตัวอย่างที่ 2: ใช้ xpcall พร้อม error handler",
            "local function handler(err)",
            "    print(\"Handled error:\", err)",
            "end",
            "local function risky()",
            "    error(\"Something went wrong!\")",
            "end",
            "xpcall(risky, handler)",
            "",
            "-- ตัวอย่างที่ 3: โยนข้อผิดพลาดด้วย error()",
            "local function doSomething(value)",
            "    if type(value) ~= \"number\" then",
            "        error(\"Expected number, got \" .. type(value))",
            "    end",
            "    print(\"Value is number:\", value)",
            "end",
            "pcall(doSomething, \"abc\")",
            "pcall(doSomething, 123)"
        ],
        "canRun": true
    },
    "8": {
        "title": "คอร์รุตีน [ Coroutines ]",
        "description": "คอร์รุตีนเป็นกระบวนการเบาใน Lua ที่ช่วยให้สามารถหยุดและกลับมาทำงานต่อของฟังก์ชันได้ ใช้ coroutine.create เพื่อสร้าง coroutine และควบคุมการทำงานด้วย coroutine.resume / coroutine.yield",
        "code": [
            "-- ตัวอย่าง: ฟังก์ชันนับเลขพร้อม yield",
            "local function countTo(max)",
            "    for i = 1, max do",
            "        print(\"Count =\", i)",
            "        coroutine.yield()  -- หยุดการทำงานชั่วคราว",
            "    end",
            "end",
            "",
            "-- สร้าง coroutine ด้วย coroutine.create",
            "local co = coroutine.create(function() countTo(3) end)",
            "",
            "-- ตรวจสอบสถานะและ resume เพื่อเรียกทำงานหรือกลับมาทำงานต่อ",
            "print(coroutine.status(co))  -- suspended",
            "coroutine.resume(co)         -- พิมพ์ Count = 1",
            "coroutine.resume(co)         -- พิมพ์ Count = 2",
            "coroutine.resume(co)         -- พิมพ์ Count = 3",
            "print(coroutine.status(co))  -- dead"
        ],
        "canRun": true
    },
    "9": {
        "title": "การเขียนโปรแกรมเชิงวัตถุ [ OOP Patterns ]",
        "description": "ใช้ metatables เพื่อสร้าง “คลาส” ใน Lua พร้อมกำหนด metamethods เช่น __call, __tostring เพื่อปรับพฤติกรรมของออบเจกต์\n\nการสร้างคลาส: สร้างตารางต้นแบบและตั้ง metatable\n__call : อนุญาตให้สร้างอินสแตนซ์ด้วยการเรียกชื่อคลาสเหมือนฟังก์ชัน\n__tostring : กำหนดการแปลงออบเจกต์เป็นสตริงเมื่อใช้ print\nmetamethods อื่น ๆ: เช่น __add, __index เพื่อโอเวอร์โหลดการทำงานต่าง ๆ",
        "code": [
            "-- สร้างคลาส Person",
            "local Person = {}",
            "Person.__index = Person",
            "",
            "-- กำหนด __call ให้สามารถสร้างอินสแตนซ์ได้",
            "setmetatable(Person, {",
            "    __call = function(cls, name, age)",
            "        local self = setmetatable({}, cls)",
            "        self.name = name",
            "        self.age = age",
            "        return self",
            "    end",
            "})",
            "",
            "-- กำหนด __tostring สำหรับการแสดงผล",
            "function Person:__tostring()",
            "    return \"Person<\" .. self.name .. \", age=\" .. self.age .. \">\"",
            "end",
            "",
            "-- สร้างออบเจกต์และทดสอบ",
            "local p1 = Person(\"Alice\", 28)",
            "print(p1)            -- ใช้ __tostring",
            "",
            "-- ตัวอย่างการใช้ __add เพื่อบวกอายุ",
            "function Person.__add(a, b)",
            "    return a.age + b.age",
            "end",
            "local p2 = Person(\"Bob\", 32)",
            "print(p1 + p2)       -- ผลลัพธ์ = 60"
        ],
        "canRun": true
    }
}